/*
 * generated by Xtext 2.24.0
 */
package fr.diverse.moda.serializer;

import com.google.inject.Inject;
import fr.diverse.moda.model.moda.Data;
import fr.diverse.moda.model.moda.MODAModel;
import fr.diverse.moda.model.moda.MODARelation;
import fr.diverse.moda.model.moda.ModaPackage;
import fr.diverse.moda.model.moda.Model;
import fr.diverse.moda.model.moda.RunningSoftware;
import fr.diverse.moda.model.moda.STS;
import fr.diverse.moda.services.ModaGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ModaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ModaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModaPackage.DATA:
				sequence_Data(context, (Data) semanticObject); 
				return; 
			case ModaPackage.MODA_MODEL:
				sequence_MODAModel(context, (MODAModel) semanticObject); 
				return; 
			case ModaPackage.MODA_RELATION:
				sequence_MODARelation(context, (MODARelation) semanticObject); 
				return; 
			case ModaPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ModaPackage.RUNNING_SOFTWARE:
				sequence_RunningSoftware(context, (RunningSoftware) semanticObject); 
				return; 
			case ModaPackage.STS:
				sequence_STS(context, (STS) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MODAElement returns Data
	 *     Data returns Data
	 *
	 * Constraint:
	 *     (name=EString kind=DataKind description=EString?)
	 */
	protected void sequence_Data(ISerializationContext context, Data semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MODAModel returns MODAModel
	 *
	 * Constraint:
	 *     (name=EString (model+=Model (model+=Model | data+=Data | software=RunningSoftware | sts=STS | modarelation+=MODARelation)*)?)
	 */
	protected void sequence_MODAModel(ISerializationContext context, MODAModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MODARelation returns MODARelation
	 *
	 * Constraint:
	 *     (name=EString kind=RelationKind src=[MODAElement|EString] tgt=[MODAElement|EString])
	 */
	protected void sequence_MODARelation(ISerializationContext context, MODARelation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModaPackage.Literals.MODA_RELATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModaPackage.Literals.MODA_RELATION__NAME));
			if (transientValues.isValueTransient(semanticObject, ModaPackage.Literals.MODA_RELATION__KIND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModaPackage.Literals.MODA_RELATION__KIND));
			if (transientValues.isValueTransient(semanticObject, ModaPackage.Literals.MODA_RELATION__SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModaPackage.Literals.MODA_RELATION__SRC));
			if (transientValues.isValueTransient(semanticObject, ModaPackage.Literals.MODA_RELATION__TGT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModaPackage.Literals.MODA_RELATION__TGT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMODARelationAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMODARelationAccess().getKindRelationKindEnumRuleCall_3_0(), semanticObject.getKind());
		feeder.accept(grammarAccess.getMODARelationAccess().getSrcMODAElementEStringParserRuleCall_4_0_1(), semanticObject.eGet(ModaPackage.Literals.MODA_RELATION__SRC, false));
		feeder.accept(grammarAccess.getMODARelationAccess().getTgtMODAElementEStringParserRuleCall_6_0_1(), semanticObject.eGet(ModaPackage.Literals.MODA_RELATION__TGT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MODAElement returns Model
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=EString kind=ModelKind description=EString?)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MODAElement returns RunningSoftware
	 *     RunningSoftware returns RunningSoftware
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_RunningSoftware(ISerializationContext context, RunningSoftware semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModaPackage.Literals.MODA_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModaPackage.Literals.MODA_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRunningSoftwareAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MODAElement returns STS
	 *     STS returns STS
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_STS(ISerializationContext context, STS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModaPackage.Literals.MODA_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModaPackage.Literals.MODA_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSTSAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
